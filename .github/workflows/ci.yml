name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - uses: php-actions/composer@v6

    - name: Ensure log directory exists
      run: mkdir -p log

    - name: PHPUnit tests with coverage
      uses: php-actions/phpunit@v3
      with:
        version: "9.6.11"
        php_extensions: "gd dom json libxml mbstring pcre Phar SimpleXML tokenizer xml xmlwriter xmlreader sqlite3 xdebug"
        configuration: "phpunit.xml"
        memory_limit: "1024M"
        args: '--coverage-text=log/coverage.txt --coverage-cobertura=log/coverage-cobertura.xml'
      env:
        XDEBUG_MODE: coverage

    - name: List log directory
      run: ls -al log/

    - name: Upload coverage report in text format
      uses: actions/upload-artifact@v3
      with:
        name: coverage-text
        path: log/coverage.txt

    - name: Upload cobertura coverage report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-cobertura
        path: log/coverage-cobertura.xml
        
    - name: Code Coverage Summary Report
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: log/coverage-cobertura.xml
        badge: true
        format: 'markdown'
        output: 'both'

    - name: Write to Job Summary
      run: cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY

  php-cs:
    runs-on: ubuntu-latest
    name: ðŸ§¹ PHP Code Sniffer
    steps:
    - name: ðŸšš Get latest code
      uses: actions/checkout@v4

    - name: ðŸ“¦ Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: mbstring, dom, xml, zip, curl, json, sqlite3, pdo_sqlite, xdebug

    - name: ðŸ“¦ Install Composer dependencies
      run: composer install

    #- name: PHP Code Sniffer
    #  uses: php-actions/phpcs@v1
    #  with:
    #    php_version: 8.1
    #    path: lib/
    #    standard: PSR12

  php-md:
    runs-on: ubuntu-latest
    name: ðŸ§¹ PHP Mess Detector
    steps:
    - name: ðŸšš Get latest code
      uses: actions/checkout@v4

    - name: ðŸ“¦ Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: mbstring, dom, xml, zip, curl, json, sqlite3, pdo_sqlite, xdebug

    - name: ðŸ“¦ Install Composer dependencies
      run: composer install

    #- name: PHP Mess Detector
    #  uses: php-actions/phpmd@v1
    #  with:
    #    php_version: 8.1
    #    path: lib/
    #    output: text
    #    ruleset: cleancode,codesize,controversial,design,naming,unusedcode

  php-stan: 
    runs-on: ubuntu-latest
    name: ðŸ§¹ PHPStan
    steps:
    - name: ðŸšš Get latest code
      uses: actions/checkout@v4

    - name: ðŸ“¦ Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: mbstring, dom, xml, zip, curl, json, sqlite3, pdo_sqlite, xdebug

    - name: ðŸ“¦ Install Composer dependencies
      run: composer install

    - name: PHPStan
      uses: php-actions/phpstan@v1
      with:
        path: lib/
  
  web-deploy:
    needs: [build-test, php-cs, php-md, php-stan]
    runs-on: ubuntu-latest
    name: ðŸŽ‰ Deploy
    steps:
    - name: ðŸšš Get latest code
      uses: actions/checkout@v4

    - name: ðŸ“‚ Sync files
      uses: SamKirkland/FTP-Deploy-Action@v4.3.5
      with:
        server: ${{ secrets.FTP_URL }}
        username: ${{ secrets.FTP_LOGIN }}
        password: ${{ secrets.FTP_PASSWORD }}
        exclude: |
          **/.git*
          **/.git*/**
          **/node_modules/**
          **/vendor/**


